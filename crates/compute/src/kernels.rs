use crate::Kernel;

impl Kernel {
    pub fn name(&self) -> &'static str {
        match self {
            Kernel::Add => "add",
            Kernel::Sub => "sub",
            Kernel::Mul => "mul",
            Kernel::Div => "div",
            Kernel::Neg => "neg",
            Kernel::Exp => "exp",
            Kernel::Log => "log",
            Kernel::Sqrt => "sqrt",
            Kernel::Rsqrt => "rsqrt",
            Kernel::Tanh => "tanh",
            Kernel::Relu => "relu",
            Kernel::Sigmoid => "sigmoid",
            Kernel::Min => "min",
            Kernel::Max => "max",
            Kernel::Clamp => "clamp",
            Kernel::Where => "where",
            Kernel::ReduceSum => "reduce_sum",
            Kernel::ReduceMean => "reduce_mean",
            Kernel::ReduceMax => "reduce_max",
            Kernel::SegmentedReduceSum => "segmented_reduce_sum",
            Kernel::ScatterAdd => "scatter_add",
            Kernel::Gather => "gather",
            Kernel::MatMul => "matmul",
            Kernel::IntegrateBodies => "integrate_bodies",
            Kernel::DetectContactsSphere => "detect_contacts_sphere",
            Kernel::DetectContactsBox => "detect_contacts_box",
            Kernel::DetectContactsSDF => "detect_contacts_sdf",
            Kernel::SolveContactsPBD => "solve_contacts_pbd",
            Kernel::SolveJointsPBD => "solve_joints_pbd",
            Kernel::ExpandInstances => "expand_instances",
            Kernel::RngNormal => "rng_normal",
        }
    }

    pub fn to_shader_source(&self) -> &'static str {
        match self {
            Kernel::Add => include_str!("../../../shaders/add.wgsl"),
            Kernel::Sub => include_str!("../../../shaders/sub.wgsl"),
            Kernel::Mul => include_str!("../../../shaders/mul.wgsl"),
            Kernel::Div => include_str!("../../../shaders/div.wgsl"),
            Kernel::Neg => include_str!("../../../shaders/neg.wgsl"),
            Kernel::Exp => include_str!("../../../shaders/exp.wgsl"),
            Kernel::Log => include_str!("../../../shaders/log.wgsl"),
            Kernel::Sqrt => include_str!("../../../shaders/sqrt.wgsl"),
            Kernel::Rsqrt => include_str!("../../../shaders/rsqrt.wgsl"),
            Kernel::Tanh => include_str!("../../../shaders/tanh.wgsl"),
            Kernel::Relu => include_str!("../../../shaders/relu.wgsl"),
            Kernel::Sigmoid => include_str!("../../../shaders/sigmoid.wgsl"),
            Kernel::Min => include_str!("../../../shaders/min.wgsl"),
            Kernel::Max => include_str!("../../../shaders/max.wgsl"),
            Kernel::Clamp => include_str!("../../../shaders/clamp.wgsl"),
            Kernel::Where => include_str!("../../../shaders/where.wgsl"),
            Kernel::ReduceSum => include_str!("../../../shaders/reduce_sum.wgsl"),
            Kernel::ReduceMean => include_str!("../../../shaders/reduce_mean.wgsl"),
            Kernel::ReduceMax => include_str!("../../../shaders/reduce_max.wgsl"),
            Kernel::SegmentedReduceSum => include_str!("../../../shaders/segmented_reduce_sum.wgsl"),
            Kernel::ScatterAdd => include_str!("../../../shaders/scatter_add.wgsl"),
            Kernel::Gather => include_str!("../../../shaders/gather.wgsl"),
            Kernel::MatMul => include_str!("../../../shaders/matmul.wgsl"),
            Kernel::IntegrateBodies => include_str!("../../../shaders/integrate_bodies.wgsl"),
            Kernel::DetectContactsSphere => include_str!("../../../shaders/detect_contacts_sphere.wgsl"),
            Kernel::DetectContactsBox => include_str!("../../../shaders/detect_contacts_box.wgsl"),
            Kernel::DetectContactsSDF => include_str!("../../../shaders/detect_contacts_sdf.wgsl"),
            Kernel::SolveContactsPBD => include_str!("../../../shaders/solve_contacts_pbd.wgsl"),
            Kernel::SolveJointsPBD => include_str!("../../../shaders/solve_joints_pbd.wgsl"),
            Kernel::ExpandInstances => include_str!("../../../shaders/expand_instances.wgsl"),
            Kernel::RngNormal => include_str!("../../../shaders/rng_normal.wgsl"),
        }
    }
} 